---
title: Using Git and GitHub with R
format:
  rfortherestofus-slides-revealjs:
    menu: false
    progress: true
    slide-number: true
    show-slide-number: print
    center: true
    incremental: true
    auto-animate: true
execute: 
  message: false
  warning: false
  cache: false
title-slide-attributes:
  data-background-image: assets/rru-hex-bg-gradient-dark.svg
  data-background-size: cover
---

# Introduction to Git and GitHub {.inverse background-image="images/bg-github.jpg"}

# What is Git?<br>What is GitHub? {.inverse background-image="images/bg-confused.jpg"}

---

:::: {.columns}

::: {.column width="50%"}
![](images/git-logo.svg)
:::

::: {.column width="50%"}
![](images/github-logo.svg)
:::

::::

---

![](images/git-github-not-the-same.svg)

## Git {.inverse}

## Git

- Version control system **on your local computer**

- Allows you to take **snapshots** of your code as it progresses

- Allows you to view the **history of your code over time**

---

![](images/git-visual.svg)

## GitHub {.inverse}

---

![](images/github-website.png)

## GitHub Alternatives

![](images/gitlab-bitbucket.png)

# Why Should You Learn to Use Git and GitHub? {.inverse background-image="images/bg-workstation.jpg"}

## Version Control {.inverse}

---

![](images/git-visual.svg)

## Backup {.inverse}

---

![](images/git-and-rstudio.svg)

---

![](images/git-and-rstudio-in-sync.svg)

## Collaboration {.inverse}

---

![](images/git-collaboration1.svg)

---

![](images/git-collaboration2.svg)

---

![](images/git-collaboration3.svg)

---

![](images/git-collaboration4.svg)

# Update Everything {.inverse background-image="images/bg-setup.jpg"}

---

![](images/setup-90pct.svg)

## Your Turn {.your-turn}

1. Update R

1. Update RStudio

1. Update all of your R packages


# Install and Configure GitHub Desktop {.inverse}

## Sign Up for GitHub

![](images/github-signup.svg)

## Connect GitHub Desktop

![](images/gh-desktop-sign-in-github.png)

## Add Your Name and Email

![](images/gh-desktop-name-email.png)

# Create a Local Git Repository {.inverse}

## Your Turn {.your-turn}

1. Create a new RStudio project called `local-first`

1. Add a new Git repository to your project using GitHub Desktop

# Commits {.inverse}

::: {.notes}
Commits are a snapshot of your code at any point

Staging files

Commit messages
:::

## Commits are Snapshots

![](images/git-visual.svg)

## Commits Have Two Parts 

- Part 1: Files you **stage** (i.e. include in your commit). 

- Part 2: A **commit message** that tells you what has changed since the last commit.

## Staging Files

- Which files do you want to include in this commit? 

- Think about it as: which files do you want to include on the stage?

- Include all files for now.

## Commit Messages {.inverse}

---

![](images/final-docx.svg)

---

![](images/no-version-info.svg)

::: {.notes}
Switch to GitHub Desktop
:::

## Your Turn {.your-turn}

1. Create a new file called README.md in your `local-first` project and add text

1. Switch to GitHub Desktop

1. Make sure the README.md file is included for staging

1. Add a commit message (e.g. "Add README file")

1. Make a commit

# Commit History {.inverse background-image="images/bg-time-travel.jpg"}

::: {.notes}
Explain that we make commit message to know what's different at this point

Show just in RStudio

Explain diffs
:::

## Your Turn {.your-turn}

1. Add some additional text to your README.md

1. Commit your changes (make sure to stage your README.md file and add a commit message)

1. View the history of your repository

1. Make sure you understand the commit history and the diff

# GitHub {.inverse}

## GitHub Repositories

- aka "repo"

- One repository for each project

---

![](images/bg-github-repo.png)

## GitHub Commit History

![](images/github-commit-history.png)

::: {.notes}
It's basically the same as GH Desktop

Same as viewing locally but you can also see code as it was at any point
:::

## Diffs on GitHub

![](images/github-diff.png)

## View Past Versions of Code

![](images/github-past-versions.svg)

## Your Turn {.your-turn}

1. Open the [GitHub repository with the materials for this course](https://github.com/rfortherestofus/git-github-course-v2)

1. Click on commits

1. Take a look through the commit history to see how the code changed over time

# Push an RStudio Project to GitHub {.inverse}



## Publish Your Project

![](images/publish-repository.png)

## Your Turn {.your-turn}

1. Publish your `local-first` project to GitHub using the Publish Repository Button

# Pull a GitHub Repository to an RStudio Project {.inverse}

## Create a New Repository on GitHub

[![](images/github-new-repo.png)](https://github.com/new)

## Clone the Repository

![](images/clone-repo-gh-desktop.png)

## Your Turn {.your-turn}

1. Create a new repository on GitHub called `github-first`

1. Create a new project in RStudio by cloning the `github-first` GitHub repository you just created

# Keep RStudio and GitHub in Sync {.inverse}

## Keep RStudio and GitHub in Sync

1. Work in RStudio

1. Any time you make significant changes, make a commit

1. Push your work to GitHub

## Your Turn {.your-turn}

1. Create a README.md in the `github-first` project and add some text

1. Stage this file (and any other modified files) and add a commit message

1. Hit commit

1. After you commit, push your changes to GitHub

1. Go to your GitHub repository and make sure you see your changes
